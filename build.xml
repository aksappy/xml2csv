<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="xml2csv" xmlns:ivy="antlib:org.apache.ivy.ant">
	<property environment="env" />
	<path id="ivy.lib.path">
		<fileset dir="${env.IVY_HOME}" includes="ivy-2.4.0-rc1.jar" />
	</path>
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	<property name="junit.output.dir" value="junit" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.6" />
	<property name="source" value="1.6" />
	<property name="LIB" value="lib" />
	<path id="JUnit 4.libraryclasspath">
		<fileset dir="${LIB}">
			<include name="junit-4.11.jar" />
			<include name="hamcrest-core-1.3.jar" />
		</fileset>
	</path>
	<!-- The classpath to build xml2csv against -->
	<path id="xml2csv.build.classpath">
		<fileset dir="${LIB}">
			<include name="Saxon-HE-9.5.1-6.jar" />
			<include name="xercesImpl-2.11.0.jar" />
			<include name="commons-cli-1.2.jar" />
		</fileset>
		<path refid="JUnit 4.libraryclasspath" />
	</path>
	<!-- The classpath required to execute xml2csv -->
	<path id="xml2csv.execute.classpath">
		<path refid="xml2csv.build.classpath" />
		<!-- Make sure that you include ALL jar files, otherwise we're taking responsibility for knowing
		     all the transitive dependendies of Jars we depend on. -->
		<fileset dir="${LIB}">
			<include name="**/*.jar" />
		</fileset>
		<!-- Don't forget to include our own bin directory -->
		<pathelement location="bin" />
	</path>
	<target name="resolve" description="Retrieve dependencies with ivy">
		<ivy:retrieve />
	</target>
	<!-- Cleaning targets -->
	<target name="clean" description="Deletes all the built artifacts">
		<delete dir="bin" />
		<delete dir="javadoc" />
	</target>
	<target name="clean-ivy" description="Deletes the dependencies downloaded by Ivy">
		<delete dir="${LIB}" />
	</target>
	<target name="clean-junit" description="Deletes all JUnit outputs">
		<delete dir="${junit.output.dir}" />
	</target>
	<target name="clean-jar" description="Deletes all built jar artifacts">
		<delete file="xml2csv.jar" />
		<delete file="xml2csv-standalone.jar" />
	</target>
	<target depends="clean, clean-ivy, clean-junit,clean-jar" name="clean-all" description="Deletes all built artifacts and downloaded dependencies" />
	<target depends="resolve" name="build" description="Compile all the sources">
		<echo message="${ant.project.name}: ${ant.file}" />
		<mkdir dir="bin" />
		<!-- Copy all the non-compiled resources from the source directory to bin -->
		<copy includeemptydirs="false" todir="bin">
			<fileset dir="src">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
			<src path="src" />
			<classpath refid="xml2csv.build.classpath" />
		</javac>
	</target>
	<target depends="resolve" name="build-tests" description="Compile all the test sources">
		<echo message="${ant.project.name}: ${ant.file}" />
		<mkdir dir="testbin" />
		<!-- Copy all the non-compiled resources from the source directory to bin -->
		<copy includeemptydirs="false" todir="testbin">
			<fileset dir="testsrc">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<javac debug="true" debuglevel="${debuglevel}" destdir="testbin" includeantruntime="false" source="${source}" target="${target}">
			<src path="testsrc" />
			<classpath>
				<path refid="xml2csv.build.classpath" />
				<pathelement location="bin" />
			</classpath>
		</javac>
	</target>
	<target name="test" depends="build, build-tests" description="Run all the unit tests">
		<mkdir dir="${junit.output.dir}" />
		<junit fork="yes" printsummary="withOutAndErr">
			<formatter type="xml" />
			<batchtest todir="${junit.output.dir}">
				<fileset dir="testbin">
					<include name="**/*Tests.class" />
				</fileset>
			</batchtest>
			<classpath>
				<path refid="xml2csv.execute.classpath" />
				<pathelement location="bin" />
				<pathelement location="testbin" />
			</classpath>
		</junit>
	</target>
	<target name="junit-report" depends="test" description="Creates a Junit execution report">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.output.dir}" />
		</junitreport>
	</target>
	<target name="build-jar" description="Create runnable jar which requires external dependencies" depends="build">
		<!-- convert classpath to a flat list/string for use in manifest task -->
		<pathconvert property="mf.classpath" pathsep=" ">
			<path refid="xml2csv.execute.classpath" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="lib/*" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<tstamp />
		<jar destfile="xml2csv.jar">
			<manifest>
				<attribute name="Class-Path" value="${mf.classpath}" />
				<attribute name="Main-Class" value="com.locima.xml2csv.cmdline.Program" />
			</manifest>
			<fileset dir="bin" excludes="**/logback-test.xml" />
		</jar>
	</target>
	<target name="build-standalone-jar" description="Create standalone runnable jar" depends="build">
		<jar destfile="xml2csv-standalone.jar">
			<manifest>
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
				<attribute name="Rsrc-Main-Class" value="com.locima.xml2csv.cmdline.Program" />
				<attribute name="Class-Path" value="." />
				<attribute name="Rsrc-Class-Path" value="./ commons-cli-1.2.jar logback-classic-1.1.2.jar logback-core-1.1.2.jar Saxon-HE-9.5.1-6.jar slf4j-api-1.7.6.jar xercesImpl-2.11.0.jar xml-apis-1.4.01.jar" />
			</manifest>
			<zipfileset src="jar-in-jar-loader.zip" />
			<fileset dir="bin" excludes="**/logback-test.xml" />
			<zipfileset dir="lib" includes="commons-cli-1.2.jar" />
			<zipfileset dir="lib" includes="logback-classic-1.1.2.jar" />
			<zipfileset dir="lib" includes="logback-core-1.1.2.jar" />
			<zipfileset dir="lib" includes="Saxon-HE-9.5.1-6.jar" />
			<zipfileset dir="lib" includes="slf4j-api-1.7.6.jar" />
			<zipfileset dir="lib" includes="xercesImpl-2.11.0.jar" />
			<zipfileset dir="lib" includes="xml-apis-1.4.01.jar" />
		</jar>
	</target>
	<target name="build-javadoc" depends="resolve" description="Build project javadoc">
		<javadoc sourcepath="src" access="private" destdir="javadoc" packagenames="com.locima.xml2csv.*" author="true" version="true" use="true">
			<classpath refid="xml2csv.execute.classpath" />
			<bottom>
				&lt;i&gt;Copyright &#169; 2014-2015 Locima Ltd.  All Rights Reserved.  This code and documentation are licensed under the Microsoft Public License &lt;a target="_blank" href="http://www.microsoft.com/en-us/openness/licenses.aspx"&gt;MS-PL&lt;a&gt;.&lt;/i&gt;
			</bottom>
		</javadoc>
	</target>
	<target name="update-build.properties">
		<!-- Get the short commit hash from Git -->
		<exec executable="git.exe" outputproperty="commitHash">
			<arg value="log" />
			<arg value="-1" />
			<arg value="--pretty=format:%h"/>
		</exec>

		<!-- Get the tag name -->
		<exec executable="git.exe" outputproperty="version">
			<arg value="describe" />
			<arg value="--abbrev=0" />
			<arg value="--tags" />
		</exec>

		<!-- Get the build date -->
		<tstamp>
			<format property="buildTimeStamp" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>

		<property name="propsFile" value="src/META-INF/build.properties" />
		<propertyfile file="${propsFile}" comment="Created dynamically by Ant in build.xml update-version-properties task">
			<entry key="CommitHash" value="${commitHash}" />
			<entry key="Version" value="${version}" />
			<entry key="BuildTimeStamp" value="${buildTimeStamp}" />
		</propertyfile>
	</target>
	<target name="all" depends="build-jar, build-standalone-jar, build-javadoc" description="Build the regular jar, standalone jar and javadoc (all delivered targets)" />

</project>
